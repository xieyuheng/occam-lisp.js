(import zero add1 sub1 zero? "nat-church.lisp")
(import one two three four five "nat-church.lisp")
(import if "bool.lisp")
(import ackermann "ackermann.lisp")

(define (ackermann/1 m n)
  (if (zero? m)
    (add1 n)
    (if (zero? n)
      (ackermann/1 (sub1 m) one)
      ((lambda (m n)
         (if (zero? m)
           (add1 n)
           (if (zero? n)
             (ackermann/1 (sub1 m) one)
             (ackermann/1 (sub1 m) (ackermann/1 m (sub1 n))))))
       (sub1 m)
       (ackermann/1 m (sub1 n))))))

(assert-equal (ackermann/1 zero zero) one)
(assert-equal (ackermann/1 one zero) two)
(assert-equal (ackermann/1 zero one) two)
(assert-equal (ackermann/1 two zero) three)
(assert-equal (ackermann/1 one one) three)
(assert-equal (ackermann/1 zero two) three)
(assert-equal (ackermann/1 three zero) five)
(assert-equal (ackermann/1 two one) five)
(assert-equal (ackermann/1 one two) four)
(assert-equal (ackermann/1 zero three) four)

;; TODO fail:

;; (assert-equal ackermann ackermann/1)

(assert-equal
  (lambda (m n)
    (if (zero? m)
      (add1 n)
      (if (zero? n)
        (ackermann (sub1 m) one)
        (ackermann (sub1 m) (ackermann m (sub1 n))))))
  (lambda (m n)
    (if (zero? m)
      (add1 n)
      (if (zero? n)
        (ackermann (sub1 m) one)
        ((lambda (m n)
           (if (zero? m)
             (add1 n)
             (if (zero? n)
               (ackermann (sub1 m) one)
               (ackermann (sub1 m) (ackermann m (sub1 n))))))
         (sub1 m)
         (ackermann m (sub1 n)))))))

(assert-equal
  ackermann
  (lambda (m n)
    (if (zero? m)
      (add1 n)
      (if (zero? n)
        ((lambda (m n)
           (if (zero? m)
             (add1 n)
             (if (zero? n)
               (ackermann (sub1 m) one)
               (ackermann (sub1 m) (ackermann m (sub1 n))))))
         (sub1 m) one)
        ((lambda (m n)
           (if (zero? m)
             (add1 n)
             (if (zero? n)
               (ackermann (sub1 m) one)
               (ackermann (sub1 m) (ackermann m (sub1 n))))))
         (sub1 m)
         ((lambda (m n)
            (if (zero? m)
              (add1 n)
              (if (zero? n)
                (ackermann (sub1 m) one)
                (ackermann (sub1 m) (ackermann m (sub1 n))))))
          m (sub1 n)))))))

(assert-equal
  ackermann
  (lambda (m n)
    (if (zero? m)
      (add1 n)
      (if (zero? n)
        (if (zero? (sub1 m))
          (add1 one)
          (if (zero? one)
            (ackermann (sub1 (sub1 m)) one)
            (ackermann (sub1 (sub1 m)) (ackermann (sub1 m) (sub1 one)))))
        ((lambda (m n)
           (if (zero? m)
             (add1 n)
             (if (zero? n)
               (ackermann (sub1 m) one)
               (ackermann (sub1 m) (ackermann m (sub1 n))))))
         (sub1 m)
         ((lambda (m n)
            (if (zero? m)
              (add1 n)
              (if (zero? n)
                (ackermann (sub1 m) one)
                (ackermann (sub1 m) (ackermann m (sub1 n))))))
          m (sub1 n)))))))
